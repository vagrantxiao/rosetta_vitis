// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="data_gen_data_gen,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu9eg-ffvb1156-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.237000,HLS_SYN_LAT=9579,HLS_SYN_TPT=none,HLS_SYN_MEM=18,HLS_SYN_DSP=0,HLS_SYN_FF=73,HLS_SYN_LUT=142,HLS_VERSION=2020_2}" *)

module data_gen (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        Output_1_V_TDATA,
        Output_1_V_TVALID,
        Output_1_V_TREADY
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_pp0_stage0 = 5'd2;
parameter    ap_ST_fsm_pp0_stage1 = 5'd4;
parameter    ap_ST_fsm_pp0_stage2 = 5'd8;
parameter    ap_ST_fsm_state7 = 5'd16;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [31:0] Output_1_V_TDATA;
output   Output_1_V_TVALID;
input   Output_1_V_TREADY;

reg ap_done;
reg ap_idle;
reg ap_ready;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [11:0] triangle_3ds_0_address0;
reg    triangle_3ds_0_ce0;
wire   [7:0] triangle_3ds_0_q0;
wire   [11:0] triangle_3ds_1_address0;
reg    triangle_3ds_1_ce0;
wire   [7:0] triangle_3ds_1_q0;
wire   [11:0] triangle_3ds_2_address0;
reg    triangle_3ds_2_ce0;
wire   [7:0] triangle_3ds_2_q0;
wire   [11:0] triangle_3ds_3_address0;
reg    triangle_3ds_3_ce0;
wire   [7:0] triangle_3ds_3_q0;
wire   [11:0] triangle_3ds_4_address0;
reg    triangle_3ds_4_ce0;
wire   [7:0] triangle_3ds_4_q0;
wire   [11:0] triangle_3ds_5_address0;
reg    triangle_3ds_5_ce0;
wire   [7:0] triangle_3ds_5_q0;
wire   [11:0] triangle_3ds_6_address0;
reg    triangle_3ds_6_ce0;
wire   [7:0] triangle_3ds_6_q0;
wire   [11:0] triangle_3ds_7_address0;
reg    triangle_3ds_7_ce0;
wire   [7:0] triangle_3ds_7_q0;
wire   [11:0] triangle_3ds_8_address0;
reg    triangle_3ds_8_ce0;
wire   [7:0] triangle_3ds_8_q0;
reg    Output_1_V_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage1;
reg   [0:0] icmp_ln33_reg_266;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln33_reg_266_pp0_iter1_reg;
reg   [11:0] i_reg_192;
wire   [11:0] add_ln33_fu_203_p2;
reg   [11:0] add_ln33_reg_261;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state5_pp0_stage0_iter1;
reg    ap_block_state5_io;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln33_fu_209_p2;
wire   [31:0] p_Result_s_fu_228_p5;
reg    ap_block_state3_pp0_stage1_iter0;
reg    ap_block_state3_io;
reg    ap_block_state6_pp0_stage1_iter1;
reg    ap_block_state6_io;
reg    ap_block_pp0_stage1_11001;
wire   [31:0] p_Result_1_fu_241_p5;
reg   [31:0] p_Result_1_reg_320;
reg   [7:0] triangle_3ds_8_load_reg_325;
wire   [31:0] p_Result_2_fu_253_p3;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_block_state4_pp0_stage2_iter0;
reg    ap_block_state4_io;
reg    ap_block_pp0_stage2_subdone;
reg    ap_block_pp0_stage1_subdone;
reg   [11:0] ap_phi_mux_i_phi_fu_196_p4;
wire   [63:0] i_cast_fu_215_p1;
reg    ap_block_pp0_stage1_01001;
reg    ap_block_pp0_stage2_01001;
reg    ap_block_pp0_stage0_01001;
reg    ap_block_pp0_stage2_11001;
wire    ap_CS_fsm_state7;
wire    regslice_both_Output_1_V_U_apdone_blk;
reg   [4:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg   [31:0] Output_1_V_TDATA_int_regslice;
reg    Output_1_V_TVALID_int_regslice;
wire    Output_1_V_TREADY_int_regslice;
wire    regslice_both_Output_1_V_U_vld_out;
reg    ap_condition_249;
reg    ap_condition_254;
reg    ap_condition_260;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

data_gen_triangle_3ds_0 #(
    .DataWidth( 8 ),
    .AddressRange( 3192 ),
    .AddressWidth( 12 ))
triangle_3ds_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(triangle_3ds_0_address0),
    .ce0(triangle_3ds_0_ce0),
    .q0(triangle_3ds_0_q0)
);

data_gen_triangle_3ds_1 #(
    .DataWidth( 8 ),
    .AddressRange( 3192 ),
    .AddressWidth( 12 ))
triangle_3ds_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(triangle_3ds_1_address0),
    .ce0(triangle_3ds_1_ce0),
    .q0(triangle_3ds_1_q0)
);

data_gen_triangle_3ds_2 #(
    .DataWidth( 8 ),
    .AddressRange( 3192 ),
    .AddressWidth( 12 ))
triangle_3ds_2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(triangle_3ds_2_address0),
    .ce0(triangle_3ds_2_ce0),
    .q0(triangle_3ds_2_q0)
);

data_gen_triangle_3ds_3 #(
    .DataWidth( 8 ),
    .AddressRange( 3192 ),
    .AddressWidth( 12 ))
triangle_3ds_3_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(triangle_3ds_3_address0),
    .ce0(triangle_3ds_3_ce0),
    .q0(triangle_3ds_3_q0)
);

data_gen_triangle_3ds_4 #(
    .DataWidth( 8 ),
    .AddressRange( 3192 ),
    .AddressWidth( 12 ))
triangle_3ds_4_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(triangle_3ds_4_address0),
    .ce0(triangle_3ds_4_ce0),
    .q0(triangle_3ds_4_q0)
);

data_gen_triangle_3ds_5 #(
    .DataWidth( 8 ),
    .AddressRange( 3192 ),
    .AddressWidth( 12 ))
triangle_3ds_5_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(triangle_3ds_5_address0),
    .ce0(triangle_3ds_5_ce0),
    .q0(triangle_3ds_5_q0)
);

data_gen_triangle_3ds_6 #(
    .DataWidth( 8 ),
    .AddressRange( 3192 ),
    .AddressWidth( 12 ))
triangle_3ds_6_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(triangle_3ds_6_address0),
    .ce0(triangle_3ds_6_ce0),
    .q0(triangle_3ds_6_q0)
);

data_gen_triangle_3ds_7 #(
    .DataWidth( 8 ),
    .AddressRange( 3192 ),
    .AddressWidth( 12 ))
triangle_3ds_7_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(triangle_3ds_7_address0),
    .ce0(triangle_3ds_7_ce0),
    .q0(triangle_3ds_7_q0)
);

data_gen_triangle_3ds_8 #(
    .DataWidth( 8 ),
    .AddressRange( 3192 ),
    .AddressWidth( 12 ))
triangle_3ds_8_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(triangle_3ds_8_address0),
    .ce0(triangle_3ds_8_ce0),
    .q0(triangle_3ds_8_q0)
);

data_gen_regslice_both #(
    .DataWidth( 32 ))
regslice_both_Output_1_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(Output_1_V_TDATA_int_regslice),
    .vld_in(Output_1_V_TVALID_int_regslice),
    .ack_in(Output_1_V_TREADY_int_regslice),
    .data_out(Output_1_V_TDATA),
    .vld_out(regslice_both_Output_1_V_U_vld_out),
    .ack_out(Output_1_V_TREADY),
    .apdone_blk(regslice_both_Output_1_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_subdone)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_192 <= 12'd0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln33_reg_266 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_reg_192 <= add_ln33_reg_261;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln33_reg_261 <= add_ln33_fu_203_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln33_reg_266 <= icmp_ln33_fu_209_p2;
        icmp_ln33_reg_266_pp0_iter1_reg <= icmp_ln33_reg_266;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln33_reg_266 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        p_Result_1_reg_320 <= p_Result_1_fu_241_p5;
        triangle_3ds_8_load_reg_325 <= triangle_3ds_8_q0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln33_reg_266_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln33_reg_266 == 1'd0) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln33_reg_266 == 1'd0) & (1'b0 == ap_block_pp0_stage1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln33_reg_266 == 1'd0) & (1'b0 == ap_block_pp0_stage2)))) begin
        Output_1_V_TDATA_blk_n = Output_1_V_TREADY_int_regslice;
    end else begin
        Output_1_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((icmp_ln33_reg_266 == 1'd0)) begin
        if ((1'b1 == ap_condition_260)) begin
            Output_1_V_TDATA_int_regslice = p_Result_2_fu_253_p3;
        end else if ((1'b1 == ap_condition_254)) begin
            Output_1_V_TDATA_int_regslice = p_Result_1_reg_320;
        end else if ((1'b1 == ap_condition_249)) begin
            Output_1_V_TDATA_int_regslice = p_Result_s_fu_228_p5;
        end else begin
            Output_1_V_TDATA_int_regslice = 'bx;
        end
    end else begin
        Output_1_V_TDATA_int_regslice = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln33_reg_266 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln33_reg_266 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln33_reg_266 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001)))) begin
        Output_1_V_TVALID_int_regslice = 1'b1;
    end else begin
        Output_1_V_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln33_fu_209_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((regslice_both_Output_1_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state7))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln33_reg_266 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_i_phi_fu_196_p4 = add_ln33_reg_261;
    end else begin
        ap_phi_mux_i_phi_fu_196_p4 = i_reg_192;
    end
end

always @ (*) begin
    if (((regslice_both_Output_1_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state7))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        triangle_3ds_0_ce0 = 1'b1;
    end else begin
        triangle_3ds_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        triangle_3ds_1_ce0 = 1'b1;
    end else begin
        triangle_3ds_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        triangle_3ds_2_ce0 = 1'b1;
    end else begin
        triangle_3ds_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        triangle_3ds_3_ce0 = 1'b1;
    end else begin
        triangle_3ds_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        triangle_3ds_4_ce0 = 1'b1;
    end else begin
        triangle_3ds_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        triangle_3ds_5_ce0 = 1'b1;
    end else begin
        triangle_3ds_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        triangle_3ds_6_ce0 = 1'b1;
    end else begin
        triangle_3ds_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        triangle_3ds_7_ce0 = 1'b1;
    end else begin
        triangle_3ds_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        triangle_3ds_8_ce0 = 1'b1;
    end else begin
        triangle_3ds_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln33_fu_209_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln33_fu_209_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((regslice_both_Output_1_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Output_1_V_TVALID = regslice_both_Output_1_V_U_vld_out;

assign add_ln33_fu_203_p2 = (ap_phi_mux_i_phi_fu_196_p4 + 12'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((1'b0 == Output_1_V_TREADY_int_regslice) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln33_reg_266 == 1'd0));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state5_io) | ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln33_reg_266 == 1'd0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state5_io) | ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln33_reg_266 == 1'd0))));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_01001 = (((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln33_reg_266_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln33_reg_266 == 1'd0)));
end

always @ (*) begin
    ap_block_pp0_stage1_11001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state6_io) | ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln33_reg_266_pp0_iter1_reg == 1'd0)))) | ((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b1 == ap_block_state3_io) | ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln33_reg_266 == 1'd0)))));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = (((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state6_io) | ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln33_reg_266_pp0_iter1_reg == 1'd0)))) | ((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b1 == ap_block_state3_io) | ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln33_reg_266 == 1'd0)))));
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_01001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln33_reg_266 == 1'd0));
end

always @ (*) begin
    ap_block_pp0_stage2_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b1 == ap_block_state4_io) | ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln33_reg_266 == 1'd0))));
end

always @ (*) begin
    ap_block_pp0_stage2_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b1 == ap_block_state4_io) | ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln33_reg_266 == 1'd0))));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_io = ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln33_reg_266 == 1'd0));
end

always @ (*) begin
    ap_block_state3_pp0_stage1_iter0 = ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln33_reg_266 == 1'd0));
end

always @ (*) begin
    ap_block_state4_io = ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln33_reg_266 == 1'd0));
end

always @ (*) begin
    ap_block_state4_pp0_stage2_iter0 = ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln33_reg_266 == 1'd0));
end

always @ (*) begin
    ap_block_state5_io = ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln33_reg_266 == 1'd0));
end

always @ (*) begin
    ap_block_state5_pp0_stage0_iter1 = ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln33_reg_266 == 1'd0));
end

always @ (*) begin
    ap_block_state6_io = ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln33_reg_266_pp0_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_block_state6_pp0_stage1_iter1 = ((1'b0 == Output_1_V_TREADY_int_regslice) & (icmp_ln33_reg_266_pp0_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_condition_249 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_01001));
end

always @ (*) begin
    ap_condition_254 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_01001));
end

always @ (*) begin
    ap_condition_260 = ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_01001));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign i_cast_fu_215_p1 = ap_phi_mux_i_phi_fu_196_p4;

assign icmp_ln33_fu_209_p2 = ((ap_phi_mux_i_phi_fu_196_p4 == 12'd3192) ? 1'b1 : 1'b0);

assign p_Result_1_fu_241_p5 = {{{{triangle_3ds_7_q0}, {triangle_3ds_6_q0}}, {triangle_3ds_5_q0}}, {triangle_3ds_4_q0}};

assign p_Result_2_fu_253_p3 = {{24'd0}, {triangle_3ds_8_load_reg_325}};

assign p_Result_s_fu_228_p5 = {{{{triangle_3ds_3_q0}, {triangle_3ds_2_q0}}, {triangle_3ds_1_q0}}, {triangle_3ds_0_q0}};

assign triangle_3ds_0_address0 = i_cast_fu_215_p1;

assign triangle_3ds_1_address0 = i_cast_fu_215_p1;

assign triangle_3ds_2_address0 = i_cast_fu_215_p1;

assign triangle_3ds_3_address0 = i_cast_fu_215_p1;

assign triangle_3ds_4_address0 = i_cast_fu_215_p1;

assign triangle_3ds_5_address0 = i_cast_fu_215_p1;

assign triangle_3ds_6_address0 = i_cast_fu_215_p1;

assign triangle_3ds_7_address0 = i_cast_fu_215_p1;

assign triangle_3ds_8_address0 = i_cast_fu_215_p1;

endmodule //data_gen
