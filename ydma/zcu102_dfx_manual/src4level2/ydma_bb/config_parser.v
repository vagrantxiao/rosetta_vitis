// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="config_parser_config_parser,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu9eg-ffvb1156-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.228000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=191,HLS_SYN_LUT=474,HLS_VERSION=2020_2}" *)

module config_parser (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input1_V_TDATA,
        input1_V_TVALID,
        input1_V_TREADY,
        input2_V_TDATA,
        input2_V_TVALID,
        input2_V_TREADY,
        output1_V_TDATA,
        output1_V_TVALID,
        output1_V_TREADY,
        output2_V_TDATA,
        output2_V_TVALID,
        output2_V_TREADY,
        output3_V_TDATA,
        output3_V_TVALID,
        output3_V_TREADY
);

parameter    ap_ST_fsm_state1 = 12'd1;
parameter    ap_ST_fsm_state2 = 12'd2;
parameter    ap_ST_fsm_state3 = 12'd4;
parameter    ap_ST_fsm_state4 = 12'd8;
parameter    ap_ST_fsm_pp1_stage0 = 12'd16;
parameter    ap_ST_fsm_state8 = 12'd32;
parameter    ap_ST_fsm_state9 = 12'd64;
parameter    ap_ST_fsm_state10 = 12'd128;
parameter    ap_ST_fsm_pp2_stage0 = 12'd256;
parameter    ap_ST_fsm_state14 = 12'd512;
parameter    ap_ST_fsm_pp3_stage0 = 12'd1024;
parameter    ap_ST_fsm_state18 = 12'd2048;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] input1_V_TDATA;
input   input1_V_TVALID;
output   input1_V_TREADY;
input  [31:0] input2_V_TDATA;
input   input2_V_TVALID;
output   input2_V_TREADY;
output  [63:0] output1_V_TDATA;
output   output1_V_TVALID;
input   output1_V_TREADY;
output  [31:0] output2_V_TDATA;
output   output2_V_TVALID;
input   output2_V_TREADY;
output  [63:0] output3_V_TDATA;
output   output3_V_TVALID;
input   output3_V_TREADY;

reg ap_done;
reg ap_idle;
reg ap_ready;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [11:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    input1_V_TDATA_blk_n;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln132_1_fu_186_p2;
reg    input2_V_TDATA_blk_n;
wire    ap_CS_fsm_pp3_stage0;
reg    ap_enable_reg_pp3_iter0;
wire    ap_block_pp3_stage0;
wire   [0:0] icmp_ln152_fu_250_p2;
reg    output1_V_TDATA_blk_n;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
reg   [0:0] icmp_ln138_reg_287;
reg    ap_enable_reg_pp1_iter2;
reg   [0:0] icmp_ln138_reg_287_pp1_iter1_reg;
reg    output2_V_TDATA_blk_n;
reg    ap_enable_reg_pp3_iter1;
reg   [0:0] icmp_ln152_reg_330;
reg    ap_enable_reg_pp3_iter2;
reg   [0:0] icmp_ln152_reg_330_pp3_iter1_reg;
reg    output3_V_TDATA_blk_n;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter1;
wire    ap_block_pp2_stage0;
reg   [0:0] icmp_ln146_reg_316;
reg    ap_enable_reg_pp2_iter2;
reg   [0:0] icmp_ln146_reg_316_pp2_iter1_reg;
reg   [8:0] i_1_reg_129;
reg   [8:0] i_2_reg_140;
reg   [31:0] i_3_reg_152;
wire   [31:0] config_num_fu_163_p1;
reg   [31:0] config_num_reg_255;
wire   [31:0] data_num_fu_167_p1;
reg   [31:0] data_num_reg_264;
wire   [0:0] icmp_ln132_fu_171_p2;
wire   [8:0] add_ln132_fu_176_p2;
reg    ap_block_state3;
wire   [8:0] add_ln138_fu_196_p2;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_state5_pp1_stage0_iter0;
reg    ap_block_state6_pp1_stage0_iter1;
reg    ap_block_state6_io;
reg    ap_block_state7_pp1_stage0_iter2;
reg    ap_block_state7_io;
reg    ap_block_pp1_stage0_11001;
wire   [0:0] icmp_ln138_fu_206_p2;
wire   [63:0] v1_buffer_V_q0;
wire   [63:0] zext_ln302_fu_216_p1;
wire   [63:0] zext_ln302_1_fu_220_p1;
wire   [8:0] add_ln146_fu_224_p2;
reg   [8:0] add_ln146_reg_311;
reg    ap_enable_reg_pp2_iter0;
wire    ap_block_state11_pp2_stage0_iter0;
reg    ap_block_state12_pp2_stage0_iter1;
reg    ap_block_state12_io;
reg    ap_block_state13_pp2_stage0_iter2;
reg    ap_block_state13_io;
reg    ap_block_pp2_stage0_11001;
wire   [0:0] icmp_ln146_fu_234_p2;
wire   [63:0] zext_ln146_1_fu_239_p1;
wire   [31:0] i_4_fu_244_p2;
reg    ap_block_state15_pp3_stage0_iter0;
reg    ap_block_state16_pp3_stage0_iter1;
reg    ap_block_state16_io;
reg    ap_block_state17_pp3_stage0_iter2;
reg    ap_block_state17_io;
reg    ap_block_pp3_stage0_11001;
reg   [31:0] tmp_1_reg_334;
wire    ap_CS_fsm_state4;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state5;
reg    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state11;
wire    ap_CS_fsm_state14;
reg    ap_block_pp3_stage0_subdone;
reg    ap_condition_pp3_exit_iter0_state15;
reg   [7:0] v1_buffer_V_address0;
reg    v1_buffer_V_ce0;
reg    v1_buffer_V_we0;
reg   [8:0] i_reg_118;
reg   [8:0] ap_phi_mux_i_2_phi_fu_144_p4;
wire   [63:0] zext_ln132_fu_191_p1;
wire   [63:0] zext_ln138_1_fu_211_p1;
reg    ap_block_state1;
reg    ap_block_pp1_stage0_01001;
reg    ap_block_pp2_stage0_01001;
reg    ap_block_pp3_stage0_01001;
wire   [31:0] zext_ln132_1_fu_182_p1;
wire   [31:0] zext_ln138_fu_202_p1;
wire   [31:0] zext_ln146_fu_230_p1;
wire    ap_CS_fsm_state18;
wire    regslice_both_output1_V_U_apdone_blk;
wire    regslice_both_output2_V_U_apdone_blk;
wire    regslice_both_output3_V_U_apdone_blk;
reg    ap_block_state18;
reg   [11:0] ap_NS_fsm;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
reg    ap_idle_pp3;
wire    ap_enable_pp3;
wire    regslice_both_input1_V_U_apdone_blk;
wire   [63:0] input1_V_TDATA_int_regslice;
wire    input1_V_TVALID_int_regslice;
reg    input1_V_TREADY_int_regslice;
wire    regslice_both_input1_V_U_ack_in;
wire    regslice_both_input2_V_U_apdone_blk;
wire   [31:0] input2_V_TDATA_int_regslice;
wire    input2_V_TVALID_int_regslice;
reg    input2_V_TREADY_int_regslice;
wire    regslice_both_input2_V_U_ack_in;
reg    output1_V_TVALID_int_regslice;
wire    output1_V_TREADY_int_regslice;
wire    regslice_both_output1_V_U_vld_out;
reg    output2_V_TVALID_int_regslice;
wire    output2_V_TREADY_int_regslice;
wire    regslice_both_output2_V_U_vld_out;
reg   [63:0] output3_V_TDATA_int_regslice;
reg    output3_V_TVALID_int_regslice;
wire    output3_V_TREADY_int_regslice;
wire    regslice_both_output3_V_U_vld_out;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 12'd1;
#0 ap_enable_reg_pp3_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp3_iter1 = 1'b0;
#0 ap_enable_reg_pp3_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
end

config_parser_v1_buffer_V #(
    .DataWidth( 64 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
v1_buffer_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(v1_buffer_V_address0),
    .ce0(v1_buffer_V_ce0),
    .we0(v1_buffer_V_we0),
    .d0(input1_V_TDATA_int_regslice),
    .q0(v1_buffer_V_q0)
);

config_parser_regslice_both #(
    .DataWidth( 64 ))
regslice_both_input1_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input1_V_TDATA),
    .vld_in(input1_V_TVALID),
    .ack_in(regslice_both_input1_V_U_ack_in),
    .data_out(input1_V_TDATA_int_regslice),
    .vld_out(input1_V_TVALID_int_regslice),
    .ack_out(input1_V_TREADY_int_regslice),
    .apdone_blk(regslice_both_input1_V_U_apdone_blk)
);

config_parser_regslice_both #(
    .DataWidth( 32 ))
regslice_both_input2_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input2_V_TDATA),
    .vld_in(input2_V_TVALID),
    .ack_in(regslice_both_input2_V_U_ack_in),
    .data_out(input2_V_TDATA_int_regslice),
    .vld_out(input2_V_TVALID_int_regslice),
    .ack_out(input2_V_TREADY_int_regslice),
    .apdone_blk(regslice_both_input2_V_U_apdone_blk)
);

config_parser_regslice_both #(
    .DataWidth( 64 ))
regslice_both_output1_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(v1_buffer_V_q0),
    .vld_in(output1_V_TVALID_int_regslice),
    .ack_in(output1_V_TREADY_int_regslice),
    .data_out(output1_V_TDATA),
    .vld_out(regslice_both_output1_V_U_vld_out),
    .ack_out(output1_V_TREADY),
    .apdone_blk(regslice_both_output1_V_U_apdone_blk)
);

config_parser_regslice_both #(
    .DataWidth( 32 ))
regslice_both_output2_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tmp_1_reg_334),
    .vld_in(output2_V_TVALID_int_regslice),
    .ack_in(output2_V_TREADY_int_regslice),
    .data_out(output2_V_TDATA),
    .vld_out(regslice_both_output2_V_U_vld_out),
    .ack_out(output2_V_TREADY),
    .apdone_blk(regslice_both_output2_V_U_apdone_blk)
);

config_parser_regslice_both #(
    .DataWidth( 64 ))
regslice_both_output3_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(output3_V_TDATA_int_regslice),
    .vld_in(output3_V_TVALID_int_regslice),
    .ack_in(output3_V_TREADY_int_regslice),
    .data_out(output3_V_TDATA),
    .vld_out(regslice_both_output3_V_U_vld_out),
    .ack_out(output3_V_TREADY),
    .apdone_blk(regslice_both_output3_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_condition_pp1_exit_iter0_state5))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state5)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state5);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_condition_pp2_exit_iter0_state11) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if (((output3_V_TREADY_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp2_exit_iter0_state11)) begin
                ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state11);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end else if (((output3_V_TREADY_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
            ap_enable_reg_pp2_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage0_subdone) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b1 == ap_condition_pp3_exit_iter0_state15))) begin
            ap_enable_reg_pp3_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state14)) begin
            ap_enable_reg_pp3_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp3_exit_iter0_state15)) begin
                ap_enable_reg_pp3_iter1 <= (1'b1 ^ ap_condition_pp3_exit_iter0_state15);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
        end else if ((1'b1 == ap_CS_fsm_state14)) begin
            ap_enable_reg_pp3_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_1_reg_129 <= 9'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln138_fu_206_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        i_1_reg_129 <= add_ln138_fu_196_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((output3_V_TREADY_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
        i_2_reg_140 <= 9'd0;
    end else if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln146_reg_316 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1))) begin
        i_2_reg_140 <= add_ln146_reg_311;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        i_3_reg_152 <= 32'd0;
    end else if (((icmp_ln152_fu_250_p2 == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        i_3_reg_152 <= i_4_fu_244_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((input1_V_TVALID_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln132_fu_171_p2 == 1'd0))) begin
        i_reg_118 <= 9'd0;
    end else if ((~((icmp_ln132_1_fu_186_p2 == 1'd0) & (input1_V_TVALID_int_regslice == 1'b0)) & (icmp_ln132_1_fu_186_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        i_reg_118 <= add_ln132_fu_176_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        add_ln146_reg_311 <= add_ln146_fu_224_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        config_num_reg_255 <= config_num_fu_163_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        data_num_reg_264 <= data_num_fu_167_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln138_reg_287 <= icmp_ln138_fu_206_p2;
        icmp_ln138_reg_287_pp1_iter1_reg <= icmp_ln138_reg_287;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        icmp_ln146_reg_316 <= icmp_ln146_fu_234_p2;
        icmp_ln146_reg_316_pp2_iter1_reg <= icmp_ln146_reg_316;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        icmp_ln152_reg_330 <= icmp_ln152_fu_250_p2;
        icmp_ln152_reg_330_pp3_iter1_reg <= icmp_ln152_reg_330;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln152_fu_250_p2 == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        tmp_1_reg_334 <= input2_V_TDATA_int_regslice;
    end
end

always @ (*) begin
    if ((icmp_ln138_fu_206_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state5 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state5 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln146_fu_234_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state11 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state11 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln152_fu_250_p2 == 1'd1)) begin
        ap_condition_pp3_exit_iter0_state15 = 1'b1;
    end else begin
        ap_condition_pp3_exit_iter0_state15 = 1'b0;
    end
end

always @ (*) begin
    if ((~((regslice_both_output3_V_U_apdone_blk == 1'b1) | (regslice_both_output2_V_U_apdone_blk == 1'b1) | (regslice_both_output1_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state18))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter0 == 1'b0) & (ap_enable_reg_pp3_iter2 == 1'b0) & (ap_enable_reg_pp3_iter1 == 1'b0))) begin
        ap_idle_pp3 = 1'b1;
    end else begin
        ap_idle_pp3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln146_reg_316 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1))) begin
        ap_phi_mux_i_2_phi_fu_144_p4 = add_ln146_reg_311;
    end else begin
        ap_phi_mux_i_2_phi_fu_144_p4 = i_2_reg_140;
    end
end

always @ (*) begin
    if ((~((regslice_both_output3_V_U_apdone_blk == 1'b1) | (regslice_both_output2_V_U_apdone_blk == 1'b1) | (regslice_both_output1_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state18))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((icmp_ln132_1_fu_186_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3)) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        input1_V_TDATA_blk_n = input1_V_TVALID_int_regslice;
    end else begin
        input1_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((input1_V_TVALID_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state2)) | (~((input1_V_TVALID_int_regslice == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)) | (~((icmp_ln132_1_fu_186_p2 == 1'd0) & (input1_V_TVALID_int_regslice == 1'b0)) & (icmp_ln132_1_fu_186_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3)))) begin
        input1_V_TREADY_int_regslice = 1'b1;
    end else begin
        input1_V_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln152_fu_250_p2 == 1'd0) & (1'b0 == ap_block_pp3_stage0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        input2_V_TDATA_blk_n = input2_V_TVALID_int_regslice;
    end else begin
        input2_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln152_fu_250_p2 == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        input2_V_TREADY_int_regslice = 1'b1;
    end else begin
        input2_V_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln138_reg_287 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp1_stage0) & (icmp_ln138_reg_287_pp1_iter1_reg == 1'd0) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
        output1_V_TDATA_blk_n = output1_V_TREADY_int_regslice;
    end else begin
        output1_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln138_reg_287 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        output1_V_TVALID_int_regslice = 1'b1;
    end else begin
        output1_V_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp3_stage0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (icmp_ln152_reg_330 == 1'd0) & (ap_enable_reg_pp3_iter1 == 1'b1)) | ((1'b0 == ap_block_pp3_stage0) & (icmp_ln152_reg_330_pp3_iter1_reg == 1'd0) & (ap_enable_reg_pp3_iter2 == 1'b1)))) begin
        output2_V_TDATA_blk_n = output2_V_TREADY_int_regslice;
    end else begin
        output2_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0) & (icmp_ln152_reg_330 == 1'd0) & (ap_enable_reg_pp3_iter1 == 1'b1))) begin
        output2_V_TVALID_int_regslice = 1'b1;
    end else begin
        output2_V_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | ((1'b0 == ap_block_pp2_stage0) & (icmp_ln146_reg_316_pp2_iter1_reg == 1'd0) & (ap_enable_reg_pp2_iter2 == 1'b1)) | ((1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln146_reg_316 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1)))) begin
        output3_V_TDATA_blk_n = output3_V_TREADY_int_regslice;
    end else begin
        output3_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_01001) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln146_reg_316 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1))) begin
        output3_V_TDATA_int_regslice = zext_ln146_1_fu_239_p1;
    end else if (((output3_V_TREADY_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
        output3_V_TDATA_int_regslice = zext_ln302_1_fu_220_p1;
    end else if (((output3_V_TREADY_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
        output3_V_TDATA_int_regslice = zext_ln302_fu_216_p1;
    end else begin
        output3_V_TDATA_int_regslice = 'bx;
    end
end

always @ (*) begin
    if ((((output3_V_TREADY_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state9)) | ((output3_V_TREADY_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state8)) | ((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln146_reg_316 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1)))) begin
        output3_V_TVALID_int_regslice = 1'b1;
    end else begin
        output3_V_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        v1_buffer_V_address0 = zext_ln138_1_fu_211_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        v1_buffer_V_address0 = zext_ln132_fu_191_p1;
    end else begin
        v1_buffer_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((~((icmp_ln132_1_fu_186_p2 == 1'd0) & (input1_V_TVALID_int_regslice == 1'b0)) & (1'b1 == ap_CS_fsm_state3)) | ((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1)))) begin
        v1_buffer_V_ce0 = 1'b1;
    end else begin
        v1_buffer_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((icmp_ln132_1_fu_186_p2 == 1'd0) & (input1_V_TVALID_int_regslice == 1'b0)) & (icmp_ln132_1_fu_186_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        v1_buffer_V_we0 = 1'b1;
    end else begin
        v1_buffer_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((input1_V_TVALID_int_regslice == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((input1_V_TVALID_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln132_fu_171_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else if (((input1_V_TVALID_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln132_fu_171_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if ((~((icmp_ln132_1_fu_186_p2 == 1'd0) & (input1_V_TVALID_int_regslice == 1'b0)) & (icmp_ln132_1_fu_186_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else if ((~((icmp_ln132_1_fu_186_p2 == 1'd0) & (input1_V_TVALID_int_regslice == 1'b0)) & (icmp_ln132_1_fu_186_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln138_fu_206_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1)) & ~((ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln138_fu_206_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((output3_V_TREADY_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((output3_V_TREADY_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((output3_V_TREADY_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((1'b0 == ap_block_pp2_stage0_subdone) & (icmp_ln146_fu_234_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (ap_enable_reg_pp2_iter1 == 1'b0)) & ~((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter2 == 1'b1) & (ap_enable_reg_pp2_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if ((((1'b0 == ap_block_pp2_stage0_subdone) & (icmp_ln146_fu_234_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (ap_enable_reg_pp2_iter1 == 1'b0)) | ((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter2 == 1'b1) & (ap_enable_reg_pp2_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_pp3_stage0;
        end
        ap_ST_fsm_pp3_stage0 : begin
            if ((~((icmp_ln152_fu_250_p2 == 1'd1) & (1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter0 == 1'b1) & (ap_enable_reg_pp3_iter1 == 1'b0)) & ~((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter2 == 1'b1) & (ap_enable_reg_pp3_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else if ((((icmp_ln152_fu_250_p2 == 1'd1) & (1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter0 == 1'b1) & (ap_enable_reg_pp3_iter1 == 1'b0)) | ((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter2 == 1'b1) & (ap_enable_reg_pp3_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end
        end
        ap_ST_fsm_state18 : begin
            if ((~((regslice_both_output3_V_U_apdone_blk == 1'b1) | (regslice_both_output2_V_U_apdone_blk == 1'b1) | (regslice_both_output1_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state18))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln132_fu_176_p2 = (i_reg_118 + 9'd1);

assign add_ln138_fu_196_p2 = (i_1_reg_129 + 9'd1);

assign add_ln146_fu_224_p2 = (ap_phi_mux_i_2_phi_fu_144_p4 + 9'd1);

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp3_stage0 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd6];

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_01001 = (((icmp_ln138_reg_287 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (output1_V_TREADY_int_regslice == 1'b0)) | ((output1_V_TREADY_int_regslice == 1'b0) & (icmp_ln138_reg_287_pp1_iter1_reg == 1'd0) & (ap_enable_reg_pp1_iter2 == 1'b1)));
end

always @ (*) begin
    ap_block_pp1_stage0_11001 = (((ap_enable_reg_pp1_iter1 == 1'b1) & ((1'b1 == ap_block_state6_io) | ((icmp_ln138_reg_287 == 1'd0) & (output1_V_TREADY_int_regslice == 1'b0)))) | ((ap_enable_reg_pp1_iter2 == 1'b1) & ((1'b1 == ap_block_state7_io) | ((output1_V_TREADY_int_regslice == 1'b0) & (icmp_ln138_reg_287_pp1_iter1_reg == 1'd0)))));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = (((ap_enable_reg_pp1_iter1 == 1'b1) & ((1'b1 == ap_block_state6_io) | ((icmp_ln138_reg_287 == 1'd0) & (output1_V_TREADY_int_regslice == 1'b0)))) | ((ap_enable_reg_pp1_iter2 == 1'b1) & ((1'b1 == ap_block_state7_io) | ((output1_V_TREADY_int_regslice == 1'b0) & (icmp_ln138_reg_287_pp1_iter1_reg == 1'd0)))));
end

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp2_stage0_01001 = (((output3_V_TREADY_int_regslice == 1'b0) & (icmp_ln146_reg_316_pp2_iter1_reg == 1'd0) & (ap_enable_reg_pp2_iter2 == 1'b1)) | ((output3_V_TREADY_int_regslice == 1'b0) & (icmp_ln146_reg_316 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp2_stage0_11001 = (((ap_enable_reg_pp2_iter2 == 1'b1) & ((1'b1 == ap_block_state13_io) | ((output3_V_TREADY_int_regslice == 1'b0) & (icmp_ln146_reg_316_pp2_iter1_reg == 1'd0)))) | ((ap_enable_reg_pp2_iter1 == 1'b1) & ((1'b1 == ap_block_state12_io) | ((output3_V_TREADY_int_regslice == 1'b0) & (icmp_ln146_reg_316 == 1'd0)))));
end

always @ (*) begin
    ap_block_pp2_stage0_subdone = (((ap_enable_reg_pp2_iter2 == 1'b1) & ((1'b1 == ap_block_state13_io) | ((output3_V_TREADY_int_regslice == 1'b0) & (icmp_ln146_reg_316_pp2_iter1_reg == 1'd0)))) | ((ap_enable_reg_pp2_iter1 == 1'b1) & ((1'b1 == ap_block_state12_io) | ((output3_V_TREADY_int_regslice == 1'b0) & (icmp_ln146_reg_316 == 1'd0)))));
end

assign ap_block_pp3_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp3_stage0_01001 = (((icmp_ln152_fu_250_p2 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (input2_V_TVALID_int_regslice == 1'b0)) | ((output2_V_TREADY_int_regslice == 1'b0) & (icmp_ln152_reg_330_pp3_iter1_reg == 1'd0) & (ap_enable_reg_pp3_iter2 == 1'b1)) | ((output2_V_TREADY_int_regslice == 1'b0) & (icmp_ln152_reg_330 == 1'd0) & (ap_enable_reg_pp3_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp3_stage0_11001 = (((icmp_ln152_fu_250_p2 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (input2_V_TVALID_int_regslice == 1'b0)) | ((ap_enable_reg_pp3_iter2 == 1'b1) & ((1'b1 == ap_block_state17_io) | ((output2_V_TREADY_int_regslice == 1'b0) & (icmp_ln152_reg_330_pp3_iter1_reg == 1'd0)))) | ((ap_enable_reg_pp3_iter1 == 1'b1) & ((1'b1 == ap_block_state16_io) | ((output2_V_TREADY_int_regslice == 1'b0) & (icmp_ln152_reg_330 == 1'd0)))));
end

always @ (*) begin
    ap_block_pp3_stage0_subdone = (((icmp_ln152_fu_250_p2 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (input2_V_TVALID_int_regslice == 1'b0)) | ((ap_enable_reg_pp3_iter2 == 1'b1) & ((1'b1 == ap_block_state17_io) | ((output2_V_TREADY_int_regslice == 1'b0) & (icmp_ln152_reg_330_pp3_iter1_reg == 1'd0)))) | ((ap_enable_reg_pp3_iter1 == 1'b1) & ((1'b1 == ap_block_state16_io) | ((output2_V_TREADY_int_regslice == 1'b0) & (icmp_ln152_reg_330 == 1'd0)))));
end

always @ (*) begin
    ap_block_state1 = ((input1_V_TVALID_int_regslice == 1'b0) | (ap_start == 1'b0));
end

assign ap_block_state11_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state12_io = ((output3_V_TREADY_int_regslice == 1'b0) & (icmp_ln146_reg_316 == 1'd0));
end

always @ (*) begin
    ap_block_state12_pp2_stage0_iter1 = ((output3_V_TREADY_int_regslice == 1'b0) & (icmp_ln146_reg_316 == 1'd0));
end

always @ (*) begin
    ap_block_state13_io = ((output3_V_TREADY_int_regslice == 1'b0) & (icmp_ln146_reg_316_pp2_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_block_state13_pp2_stage0_iter2 = ((output3_V_TREADY_int_regslice == 1'b0) & (icmp_ln146_reg_316_pp2_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_block_state15_pp3_stage0_iter0 = ((icmp_ln152_fu_250_p2 == 1'd0) & (input2_V_TVALID_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state16_io = ((output2_V_TREADY_int_regslice == 1'b0) & (icmp_ln152_reg_330 == 1'd0));
end

always @ (*) begin
    ap_block_state16_pp3_stage0_iter1 = ((output2_V_TREADY_int_regslice == 1'b0) & (icmp_ln152_reg_330 == 1'd0));
end

always @ (*) begin
    ap_block_state17_io = ((output2_V_TREADY_int_regslice == 1'b0) & (icmp_ln152_reg_330_pp3_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_block_state17_pp3_stage0_iter2 = ((output2_V_TREADY_int_regslice == 1'b0) & (icmp_ln152_reg_330_pp3_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_block_state18 = ((regslice_both_output3_V_U_apdone_blk == 1'b1) | (regslice_both_output2_V_U_apdone_blk == 1'b1) | (regslice_both_output1_V_U_apdone_blk == 1'b1));
end

always @ (*) begin
    ap_block_state3 = ((icmp_ln132_1_fu_186_p2 == 1'd0) & (input1_V_TVALID_int_regslice == 1'b0));
end

assign ap_block_state5_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_io = ((icmp_ln138_reg_287 == 1'd0) & (output1_V_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state6_pp1_stage0_iter1 = ((icmp_ln138_reg_287 == 1'd0) & (output1_V_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state7_io = ((output1_V_TREADY_int_regslice == 1'b0) & (icmp_ln138_reg_287_pp1_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_block_state7_pp1_stage0_iter2 = ((output1_V_TREADY_int_regslice == 1'b0) & (icmp_ln138_reg_287_pp1_iter1_reg == 1'd0));
end

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_enable_pp3 = (ap_idle_pp3 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign config_num_fu_163_p1 = input1_V_TDATA_int_regslice[31:0];

assign data_num_fu_167_p1 = input1_V_TDATA_int_regslice[31:0];

assign i_4_fu_244_p2 = (i_3_reg_152 + 32'd1);

assign icmp_ln132_1_fu_186_p2 = ((zext_ln132_1_fu_182_p1 == config_num_reg_255) ? 1'b1 : 1'b0);

assign icmp_ln132_fu_171_p2 = ((config_num_reg_255 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln138_fu_206_p2 = ((zext_ln138_fu_202_p1 == config_num_reg_255) ? 1'b1 : 1'b0);

assign icmp_ln146_fu_234_p2 = ((zext_ln146_fu_230_p1 == config_num_reg_255) ? 1'b1 : 1'b0);

assign icmp_ln152_fu_250_p2 = ((i_3_reg_152 == data_num_reg_264) ? 1'b1 : 1'b0);

assign input1_V_TREADY = regslice_both_input1_V_U_ack_in;

assign input2_V_TREADY = regslice_both_input2_V_U_ack_in;

assign output1_V_TVALID = regslice_both_output1_V_U_vld_out;

assign output2_V_TVALID = regslice_both_output2_V_U_vld_out;

assign output3_V_TVALID = regslice_both_output3_V_U_vld_out;

assign zext_ln132_1_fu_182_p1 = i_reg_118;

assign zext_ln132_fu_191_p1 = i_reg_118;

assign zext_ln138_1_fu_211_p1 = i_1_reg_129;

assign zext_ln138_fu_202_p1 = i_1_reg_129;

assign zext_ln146_1_fu_239_p1 = i_2_reg_140;

assign zext_ln146_fu_230_p1 = ap_phi_mux_i_2_phi_fu_144_p4;

assign zext_ln302_1_fu_220_p1 = data_num_reg_264;

assign zext_ln302_fu_216_p1 = config_num_reg_255;

endmodule //config_parser
