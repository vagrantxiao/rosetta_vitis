./accel/accel_test_bnn.exe 1
* WT_WORDS   = 4682
* KH_WORDS   = 64
## Loading input data ##
## Loading parameters ##
>> (Wt, KH) batch: (10924 256)
>> Final batch: 128
>> (Wt, KH) batch: (256 256)
>> Final batch: 128
>> (Wt, KH) batch: (256 256)
>> Final batch: 256
>> (Wt, KH) batch: (128 256)
>> Final batch: 128
>> (Wt, KH) batch: (128 256)
>> Final batch: 128
>> (Wt, KH) batch: (64 256)
>> Final batch: 64
>> (Wt, KH) bits batch: (36 256)
>> Final bits batch: 32
>> (Wt, KH) bits batch: (292 256)
>> Final bits batch: 256
>> (Wt, KH) bits batch: (292 256)
>> Final bits batch: 10
## Running BNN for 1 images
3,128,1024,0,1,1,2,1,128,128,0,0,3,0,2,2,128,256,0,0,3,1,1,1,256,128,0,0,3,0,1,2,256,128,0,0,2,0,1,2,256,128,0,0,3,1,0,1,256,128,0,0,2,1,0,1,256,128,0,0,2,1,0,1,256,128,0,0,2,1,0,1,512,64,0,0,3,0,0,2,512,64,0,0,2,0,0,2,512,64,0,0,2,0,0,2,512,64,0,0,2,0,0,2,512,64,0,0,2,0,0,2,512,64,0,0,2,0,0,2,512,64,0,0,2,0,0,2,512,64,0,0,2,0,0,2,8192,32,0,0,5,1,0,1,8192,32,0,0,4,1,0,1,8192,32,0,0,4,1,0,1,8192,32,0,0,4,1,0,1,8192,32,0,0,4,1,0,1,8192,32,0,0,4,1,0,1,8192,32,0,0,4,1,0,1,8192,32,0,0,4,1,0,1,8192,32,0,0,4,1,0,1,8192,32,0,0,4,1,0,1,8192,32,0,0,4,1,0,1,8192,32,0,0,4,1,0,1,8192,32,0,0,4,1,0,1,8192,32,0,0,4,1,0,1,8192,32,0,0,4,1,0,1,8192,32,0,0,4,1,0,1,8192,32,0,0,4,1,0,1,8192,32,0,0,4,1,0,1,8192,32,0,0,4,1,0,1,8192,32,0,0,4,1,0,1,8192,32,0,0,4,1,0,1,8192,32,0,0,4,1,0,1,8192,32,0,0,4,1,0,1,8192,32,0,0,4,1,0,1,8192,32,0,0,4,1,0,1,8192,32,0,0,4,1,0,1,8192,32,0,0,4,1,0,1,8192,32,0,0,4,1,0,1,8192,32,0,0,4,1,0,1,8192,32,0,0,4,1,0,1,8192,32,0,0,4,1,0,1,8192,32,0,0,4,1,0,1,1024,256,0,0,5,0,0,1,1024,256,0,0,4,0,0,1,1024,256,0,0,4,0,0,1,1024,256,0,0,4,0,0,1,1024,10,0,1,7,1,0,1,  Pred/Label: 3/ 3[ OK ]

Errors: 0 (0.00%)

Total accel runtime =     0.0000 seconds


   int sched_list[] = {3,128,1024,0,1,1,2,1,128,128,0,0,3,0,2,2,128,256,0,0,3,1,1,1,256,128,0,0,3,0,1,2,256,128,0,0,2,0,1,2,256,128,0,0,3,1,0,1,256,128,0,0,2,1,0,1,256,128,0,0,2,1,0,1,256,128,0,0,2,1,0,1,512,64,0,0,3,0,0,2,512,64,0,0,2,0,0,2,512,64,0,0,2,0,0,2,512,64,0,0,2,0,0,2,512,64,0,0,2,0,0,2,512,64,0,0,2,0,0,2,512,64,0,0,2,0,0,2,512,64,0,0,2,0,0,2,8192,32,0,0,5,1,0,1,8192,32,0,0,4,1,0,1,8192,32,0,0,4,1,0,1,8192,32,0,0,4,1,0,1,8192,32,0,0,4,1,0,1,8192,32,0,0,4,1,0,1,8192,32,0,0,4,1,0,1,8192,32,0,0,4,1,0,1,8192,32,0,0,4,1,0,1,8192,32,0,0,4,1,0,1,8192,32,0,0,4,1,0,1,8192,32,0,0,4,1,0,1,8192,32,0,0,4,1,0,1,8192,32,0,0,4,1,0,1,8192,32,0,0,4,1,0,1,8192,32,0,0,4,1,0,1,8192,32,0,0,4,1,0,1,8192,32,0,0,4,1,0,1,8192,32,0,0,4,1,0,1,8192,32,0,0,4,1,0,1,8192,32,0,0,4,1,0,1,8192,32,0,0,4,1,0,1,8192,32,0,0,4,1,0,1,8192,32,0,0,4,1,0,1,8192,32,0,0,4,1,0,1,8192,32,0,0,4,1,0,1,8192,32,0,0,4,1,0,1,8192,32,0,0,4,1,0,1,8192,32,0,0,4,1,0,1,8192,32,0,0,4,1,0,1,8192,32,0,0,4,1,0,1,8192,32,0,0,4,1,0,1,1024,256,0,0,5,0,0,1,1024,256,0,0,4,0,0,1,1024,256,0,0,4,0,0,1,1024,256,0,0,4,0,0,1,1024,10,0,1,7,1,0,1};
      const Address    n_inputs = sched_list[l*8];
      const Address    n_outputs = sched_list[l*8+1];
      const Address    input_words = sched_list[l*8+2];
      const Address    output_words = sched_list[l*8+3];
      const ap_uint<3> layer_mode = sched_list[l*8+4];  // [0]='new layer', [2:1]='conv1,conv,dense,last'
      const ap_uint<1> dmem_mode = sched_list[l*8+5];   // 0 means dmem[0] is input
      const ap_uint<2> width_mode = sched_list[l*8+6];  // 0=8'b, 1=16'b, 2=32'b
      const ap_uint<2> norm_mode = sched_list[l*8+7];    // 0='do nothing', 1='do norm', 2='do pool'

